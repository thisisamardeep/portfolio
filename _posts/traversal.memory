in order iterative

class Solution:
    def inorderTraversal(self, root: Optional[TreeNode]) -> List[int]:
        res = []
        stack = []
        curr = root

        while curr is not None or len(stack) != 0:
            while curr is not None:
                stack.append(curr)
                curr = curr.left
            curr = stack.pop()
            res.append(curr.val)
            curr = curr.right
        return res

in order iterative

 std::vector<int> res{};
        std::stack<TreeNode*> mystack{};
        TreeNode* curr = root;

        while (curr != nullptr || mystack.size() != 0) {
            while (curr != nullptr) {
                mystack.push(curr);
                curr = curr->left;
            }
            curr = mystack.top();
            mystack.pop();
            res.push_back(curr->val);
            curr = curr->right;
        }

        =========================================